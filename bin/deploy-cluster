#!/bin/bash

function echobig {
    if which figlet &> /dev/null
    then
        echo "[1m"
        figlet -t -f big $*
        echo ""
        echo $*
        echo "[0m"
    else
        echo $*
    fi
}

LOCAL_USERNAME=`whoami`
REVISION=`git log -n 1 --pretty=format:"%H"`
if which finger &>/dev/null
then
   REALNAME=$(finger $LOCAL_USERNAME | perl -ne 'if (/Name: (.*)[\t\n]/) { print $1; exit }')
fi
if [ "x$REALNAME" = "x" ]
then
    REALNAME=$(grep ^$LOCAL_USERNAME: /etc/passwd | cut -d: -f5 | cut -d, -f1)
fi
if [ "x$REALNAME" = "x" ]
then
    REALNAME=$LOCAL_USERNAME
fi
   
echo "Deploy cluster: $1"
echo "Initiated by $LOCAL_USERNAME@$(hostname) ($REALNAME)"
date
rm -fr .tmp.*
if [ "$1" = tootsville.org ]
then
    echo "That seems dangerous/stupid. Let's not."
    exit 1
fi
if [ "x$1" = x ]
then
    echo "Cluster name required"
    exit 2
fi

cluster=$1

cd "$(dirname $0)"/../


echobig Deploying to
echobig $cluster

echobig $(date +%Y-%m-%d\ %H:%M:%S)

echobig Running builds
make all || exit 3

bin/make-all-htaccess || exit 4

##########

echobig Pre-deploy front-ends

    echo "Pre-deployment for play.$cluster:"
    # safe place to copy in
    echo "rm -fr play.$cluster.prior-deploy && \
rm -fr play.$cluster.before-deploy && \
mv -u play.$cluster.new play.$cluster.prior-deploy ; \
cp -a play.$cluster play.$cluster.new && \
cd play.$cluster.new;" >> dist/play.preamble
    # copy in most files
    mkdir -p dist/play
    rsync --exclude='*~' --exclude='*#' -ar \
          play/* dist/play/
    # each host copies error pages
    rsync --exclude='*~' --exclude='*#'  -ar \
          www/error dist/play/
    # .htaccess generated above
    cp dist/htaccess.all/play.$cluster.htaccess dist/play/.htaccess
    # Google auth linking
    ### mkdir -p dist/play/.well-known
    ### cp include/well-known.assetlinks.json dist/play/.well-known/assetlinks.json || exit 5
    ( cd dist/ ; \
      shar -C xz -g 9 -M -Q -q -x \
           -o play.shar \
           -n "play.$cluster $REVISION" \
           -s "$LOCAL_USERNAME ($REALNAME)" \
           play/ )
    cat dist/play.preamble dist/play.shar* | ssh play.$cluster
    rm -r dist/play
    echo "done pre-deploying play.$cluster static files"
    echo ""

##########

echobig Quicklisp update
for host in users gossip world
do
    ssh $host.$cluster \
    	sbcl --non-interactive \
    	--no-inform \
    	--eval "'(ql:update-client)'" \
    	--evalÂ "'(ql:update-all-dists)'" \
    	--quit
done

##########

echobig Pre-deploy back-ends
for host in users gossip world
do
    # .htaccess generated above
    scp dist/htaccess.all/$host.$cluster.htaccess $host.$cluster: || exit 6
    # Google auth linking
    ### scp include/well-known.assetlinks.json $host.$cluster: || exit 6

    # update sources and compile
    rsync -essh -zar --delete servers \
        --exclude \*~ --exclude \*.tmp \
        $host.$cluster: || exit 6
    ssh $host.$cluster make -C servers Tootsville test || exit 6
done

##########

echobig Switching Roots
(
    ssh play.$cluster "mv play.$cluster play.$cluster.before-deploy && mv play.$cluster.new play.$cluster"
)&
for host in users gossip world
do (
    ssh $host.$cluster "cp servers/Tootsville --backup=simple -f /usr/local/bin/; \
cp $host.$cluster.htaccess --backup=simple -f /var/www/$host.$cluster/.htaccess; \
cp servers/tootsville.service --backup=simple -f /usr/lib/systemd/user/; \
mkdir -p /var/www/$host.$cluster/.well-known; \
### cp well-known.assetlinks.json /var/www/$host.$cluster/.well-known/assetlinks.json"
    )&
done

##########

until [ 0 -eq $(jobs | wc -l) ]
do
   sleep 1
   jobs
done

##########

echobig Notifying Rollbar
ACCESS_TOKEN=7c28543f4257495694b50fe59acb2ada
ENVIRONMENT=$cluster

VERSION=$(servers/Tootsville version-info version)
COMPILED=$(servers/Tootsville version-info compiled)

curl https://api.rollbar.com/api/1/deploy/ \
  -F access_token=$ACCESS_TOKEN \
  -F environment=$ENVIRONMENT \
  -F framework=deploy-cluster \
  -F notifier.name=deploy-cluster \
  -F revision=$REVISION \
  -F comment="v $VERSION built $COMPILED" \
  -F uuid=$(uuidgen)
  -F local_username=$LOCAL_USERNAME

##########

echobig Tagging Git

now=$(date +%Y-%m-%d)
msg="Deployed v$VERSION to $cluster $now"

if git rev-parse v$VERSION &>/dev/null
then
   echo "Previous tag v$VERSION found, adding v$VERSION@$now"
   if git rev-parse v$VERSION@$now &>/dev/null
       now=$(date +%Y-%m-%d)
       msg="Deployed v$VERSION to $cluster $now" 
       echo " - I meant v$VERSION@$now"
       git submodule foreach git tag -a tootsville-v$VERSION@$now -m "for Tootsville.org: $msg"
       git tag -a v$VERSION@$now -m "$msg"
   else
       git submodule foreach git tag -a tootsville-v$VERSION@$now -m "for Tootsville.org: $msg"
       git tag -a v$VERSION@$now -m "$msg"
   fi
else
   echo "First deploy of v$VERSION, tagging"
   git submodule foreach git tag -a tootsville-v$VERSION -m "for Tootsville.org: $msg"
   git tag -a v$VERSION -m "$msg"
fi

git push origin
git submodule foreach git push origin

##########

echobig Deployed $VERSION to $cluster
    
